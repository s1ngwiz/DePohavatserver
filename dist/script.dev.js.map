{"version":3,"sources":["script.js"],"names":["require","config","express","axios","cors","app","PORT","use","json","get","req","res","cuisine","query","lat1","lat2","lon1","lon2","status","error","params","q","format","addressdetails","limit","viewbox","bounded","response","data","length","restaurants","map","restaurant","name","display_name","address","lat","lon","link","console","listen","log"],"mappings":";;AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAMK,GAAG,GAAGH,OAAO,EAAnB;AACA,IAAMI,IAAI,GAAG,IAAb;AAEAD,GAAG,CAACE,GAAJ,CAAQH,IAAI,EAAZ;AACAC,GAAG,CAACE,GAAJ,CAAQL,OAAO,CAACM,IAAR,EAAR;AAEAH,GAAG,CAACI,GAAJ,CAAQ,iBAAR,EAA2B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,UAAAA,OADe,GACHF,GAAG,CAACG,KADD,CACfD,OADe;AAEjBE,UAAAA,IAFiB,GAEV,KAFU;AAGjBC,UAAAA,IAHiB,GAGV,KAHU;AAIjBC,UAAAA,IAJiB,GAIV,KAJU;AAKjBC,UAAAA,IALiB,GAKV,KALU;;AAAA,cAOlBL,OAPkB;AAAA;AAAA;AAAA;;AAAA,2CAQZD,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AAAEW,YAAAA,KAAK,EAAE;AAAT,WAArB,CARY;;AAAA;AAAA;AAAA;AAAA,0CAYIhB,KAAK,CAACM,GAAN,CAAU,oCAAV,EAAgD;AACnEW,YAAAA,MAAM,EAAE;AACJC,cAAAA,CAAC,YAAKT,OAAL,gBADG;AAEJU,cAAAA,MAAM,EAAE,MAFJ;AAGJC,cAAAA,cAAc,EAAE,CAHZ;AAIJC,cAAAA,KAAK,EAAE,CAJH;AAKJC,cAAAA,OAAO,YAAKT,IAAL,cAAaF,IAAb,cAAqBG,IAArB,cAA6BF,IAA7B,CALH;AAMJW,cAAAA,OAAO,EAAE;AANL;AAD2D,WAAhD,CAZJ;;AAAA;AAYbC,UAAAA,QAZa;;AAAA,gBAuBfA,QAAQ,CAACC,IAAT,CAAcC,MAAd,KAAyB,CAvBV;AAAA;AAAA;AAAA;;AAAA,2CAwBRlB,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AAAEW,YAAAA,KAAK,EAAE;AAAT,WAArB,CAxBQ;;AAAA;AA2BbW,UAAAA,WA3Ba,GA2BCH,QAAQ,CAACC,IAAT,CAAcG,GAAd,CAAkB,UAAAC,UAAU;AAAA,mBAAK;AACjDC,cAAAA,IAAI,EAAED,UAAU,CAACE,YADgC;AAEjDC,cAAAA,OAAO,EAAEH,UAAU,CAACG,OAF6B;AAGjDC,cAAAA,GAAG,EAAEJ,UAAU,CAACI,GAHiC;AAIjDC,cAAAA,GAAG,EAAEL,UAAU,CAACK,GAJiC;AAKjDC,cAAAA,IAAI,gDAAyCN,UAAU,CAACI,GAApD,mBAAgEJ,UAAU,CAACK,GAA3E,qBAAyFL,UAAU,CAACI,GAApG,cAA2GJ,UAAU,CAACK,GAAtH;AAL6C,aAAL;AAAA,WAA5B,CA3BD;AAmCnB1B,UAAAA,GAAG,CAACH,IAAJ,CAASsB,WAAT;AAnCmB;AAAA;;AAAA;AAAA;AAAA;AAsCnBS,UAAAA,OAAO,CAACpB,KAAR,CAAc,oBAAd;AACAR,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AAAEW,YAAAA,KAAK,EAAE;AAAT,WAArB;;AAvCmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;AA2CAd,GAAG,CAACmC,MAAJ,CAAWlC,IAAX,EAAiB;AAAA,SAAMiC,OAAO,CAACE,GAAR,yHAAkDnC,IAAlD,EAAN;AAAA,CAAjB","sourcesContent":["require(\"dotenv\").config();\r\nconst express = require(\"express\");\r\nconst axios = require(\"axios\");\r\nconst cors = require(\"cors\");\r\n\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\napp.get(\"/api/restaurant\", async (req, res) => {\r\n    const { cuisine } = req.query;\r\n    const lat1 = 54.55;\r\n    const lat2 = 54.75;\r\n    const lon1 = 25.15;\r\n    const lon2 = 25.45;\r\n\r\n    if (!cuisine) {\r\n        return res.status(400).json({ error: \"Необходим параметр cuisine.\" });\r\n    }\r\n\r\n    try {\r\n        const response = await axios.get(\"https://www.google.com/maps/search\", {\r\n            params: {\r\n                q: `${cuisine} restaurant`,\r\n                format: \"json\",\r\n                addressdetails: 1,\r\n                limit: 1,\r\n                viewbox: `${lon1},${lat1},${lon2},${lat2}`,\r\n                bounded: 1,\r\n            },\r\n        });\r\n\r\n        if (response.data.length === 0) {\r\n            return res.status(404).json({ error: \"Рестораны не найдены.\" });\r\n        }\r\n\r\n        const restaurants = response.data.map(restaurant => ({\r\n            name: restaurant.display_name,\r\n            address: restaurant.address,\r\n            lat: restaurant.lat,\r\n            lon: restaurant.lon,\r\n            link: `https://www.openstreetmap.org/?mlat=${restaurant.lat}&mlon=${restaurant.lon}#map=16/${restaurant.lat}/${restaurant.lon}`,\r\n        }));\r\n\r\n        res.json(restaurants);\r\n\r\n    } catch (error) {\r\n        console.error(\"Ошибка при поиске:\", error);\r\n        res.status(500).json({ error: \"Ошибка сервера.\" });\r\n    }\r\n});\r\n\r\napp.listen(PORT, () => console.log(`Сервер запущен на http://localhost:${PORT}`));\r\n"],"file":"script.dev.js"}